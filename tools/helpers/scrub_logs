#!/usr/bin/env bash

subText="<redacted>"
modemNum="015550199999\|223344556677"

function getArgs {
  while [ $# -gt 0 ]
  do
    case "$1" in
      "-t"|"--timestamp")
        shift
        TIMESTAMP="$1"
        shift
        ;;
      "-h"|"--help")
        showHelp
        ;;
      *)
        echo "Argument not recognized: $1"
        showHelp
        ;;
    esac
  done
}

function showHelp {
  cat << EOS
  Scrub sensitive information from phone logs after backup of original unmodified files:
   - phone numbers
   - MAC addresses
   - IP addresses (ipv4/6)
   - Wifi SSID's

  Usage: scrub_logs [-t|--timestamp]
         scrub_logs --help

    -t
    --timestamp <TIMESTAMP>
                  label backed up log files with the current timestamp
    -h
    --help
                  Show this help and exit

  NOTE: This utilty is designed to be used with 'collect_logs' and will run that first
        if this is run directly
EOS

 exit 0
}

function backupFiles {
  echo "Backing up files before redaction with timestamp ${TIMESTAMP}"
  for logFile in "${scrubFiles[@]}"; do
    if [ -f "$logFile" ]; then
      origLogFile="${logFile/%.log/-orig.log}"
      origLogFile="${origLogFile/%.txt/-orig.txt}"
      cp -a "${logFile}" "${origLogFile}"
    fi
    lastBootLogFile="${logFile/-${TIMESTAMP}/-1-${TIMESTAMP}}"
    if [ -f "$lastBootLogFile" ]; then
      origLogFile="${lastBootLogFile/%\.log/-orig.log}"
      origLogFile="${origLogFile/%\.txt/-orig.txt}"
      cp -a "${lastBootLogFile}" "${origLogFile}"
    fi
  done
}

function scrubDmesgPp {
  if [ -f "${scrubFiles[0]}" ]; then
    echo "Scrubbing ${scrubFiles[0]}"
    sed -i 's/\([a-f0-9]\{2\}:\)\{5\}[a-f0-9]\{2\}/'${subText}'/' "${scrubFiles[0]}"
  fi
}

function scrubModemManager {
  for MdmMgrFile in "${scrubFiles[1]}" "${scrubFiles[1]/-${TIMESTAMP}/-1-${TIMESTAMP}}"; do
    if [ -f "${MdmMgrFile}" ]; then
      echo "Scrubbing ${MdmMgrFile}"
      sed -i -e 's/address: .*/address: '${subText}'/' -e 's/gateway: .*/gateway: '${subText}'/' -e 's/DNS #\([1-9]\): .*/DNS #\1: '${subText}'/' "${MdmMgrFile}"
    fi
  done
}

function scrubNetworkManager {
  for netMgrFile in "${scrubFiles[2]}" "${scrubFiles[2]/-${TIMESTAMP}/-1-${TIMESTAMP}}"; do
    if [ -f "${netMgrFile}" ]; then
      echo "Scrubbing ${netMgrFile}"
      unset redacts
      declare -a redacts

      unset netIds
      declare -a netIds
      readarray -t netIds <<< $(grep 'starting connection' "${netMgrFile}" | awk $'{ match($0,/\'[a-zA-Z0-9 ]+\'/,netname); gsub(/\'/, "", netname[0]); match($0,/\([a-z0-9-]+\)$/,netid); gsub(/[()]/, "", netid[0]); printf "%s\\n%s\\n", netname[0], netid[0] }' | sort | uniq)

      unset macs; declare -a macs
      readarray -t macs <<<$(grep -Eo '([a-fA-F0-9]{2}:){5}[a-fA-F0-9]{2}' "${netMgrFile}" | sort | uniq)

      unset ipv4s
      declare -a ipv4s
      readarray -t ipv4s <<< $(grep -Eo '([1-9][0-9]{0,2}\.){3}[1-9][0-9]{0,2}(/[1-9][0-9]?)?' "${netMgrFile}" | sort | uniq)

      unset ipv6s
      declare -a ipv6s
      readarray -t ipv6s <<< $(grep -Eo '([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}(/[1-9][0-9]?)?' "${netMgrFile}" | while read line; do   unset valid; numCols=$(echo "$line" | awk -F":" '{print NF-1}'); if [ $numCols -eq 7 ]; then valid=1; elif [ $numCols -lt 7 ] && [ $numCols -ge 2 ]; then if echo "${line}" | grep -q '::'; then valid=1; fi; fi; if [ "$valid" ]; then echo "$line"; fi; done | sort | uniq)

      redacts=( "${netIds[@]}" "${macs[@]}" "${ipv4s[@]}" "${ipv6s[@]}")

      sedExpr=""
      for val in "${redacts[@]}"; do
        # Make sure the value isn't blank
        [ -z "${val}" ] && continue
        sedExpr+="-e 's,${val},${subText},g' "
      done
      [ "${sedExpr}" ] && eval sed -i $sedExpr "${netMgrFile}"
    fi
  done
}

function scrubOpenQti {
  for openQtiFile in "${scrubFiles[3]}" "${scrubFiles[3]/-${TIMESTAMP}/-1-${TIMESTAMP}}"; do
    if [ -f "${openQtiFile}" ]; then
      echo "Scrubbing ${openQtiFile}"
      unset phNums
      declare -a phNums
      readarray -t phNums <<< $(grep -E 'Call request .*[0-9]+$|Call status.*[0-9]+$' "${openQtiFile}" | grep -v "${modemNum}" | grep -Eo '[0-9]+$' | sort | uniq)
      sedExpr=""
      for phNum in "${phNums[@]}"; do
        # Make sure the value isn't blank
        [ -z "${phNum}" ] && continue
        sedExpr+="-e 's/${phNum}/${subText}/g' "
      done
      [ "${sedExpr}" ] &&  eval sed -i $sedExpr "${openQtiFile}"
    fi
  done
}

getArgs "$@"

if [ -z "$TIMESTAMP" ]; then
  SCRIPT_DIR=$(cd $(dirname "${BASH_SOURCE[0]}") && pwd)
  /bin/bash ${SCRIPT_DIR}/collect_logs
  exit $?
fi

# Note, there doesn't seem to be a need to redact anything in dmesg-modem or eg25-manager
# so don't process them
declare -a scrubFiles=( "dmesg-pinephone-${TIMESTAMP}.txt" "modemmanager-${TIMESTAMP}.log" "networkmanager-${TIMESTAMP}.log" "openqti-${TIMESTAMP}.log" )

backupFiles
scrubDmesgPp
scrubModemManager
scrubNetworkManager
scrubOpenQti

exit 0
